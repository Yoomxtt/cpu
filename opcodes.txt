

0-7	[addr] +64 -> DDRAM	EEPROM	LCD	+64		set CGRAM address shortcuts
8-127	[addr] -> DDRAM		EEPROM	LCD	RS		write ASCII shortcuts
128-207	[addr] -> DDRAM		EEPROM	LCD			set DDRAM address shortcuts

LDA								load immediate
 (1)	[addr] -> A		EEPROM	A

WRD	A -> DDRAM		A	LCD	RS		write A to DDRAM
WRC	A -> command		A	LCD			write A as command
RDD	DDRAM -> A,N,Z		LCD	A	RS RW NZ	read DDRAM to A, update N, Z flags
RDS	status -> A,N,Z		LCD	A	   RW NZ	read status to A, update N, Z flags

JMP								jump immediate
 (2)	[addr] -> X		EEPROM	X
 (3)	[addr]:X -> addr	EEPROM	ADDR

RET	DDRAM -> X		LCD	X			jump indirect
 (4)	DDRAM:X -> addr		LCD	ADDR

ADD	A+DDRAM -> A,C,N,Z	LCD	ALU	ALUO NZ		add DDRAM
SUB	A-DDRAM -> A,C,N,Z	LCD	ALU	ALUO NZ SUB	subtract DDRAM
CMP	A-DDRAM -> C,N,Z	LCD	ALU	     NZ SUB	compare DDRAM

NOP2								do nothing (skip next two bytes in EEPROM)
NOP1,(5)							do nothing (skip next byte in EEPROM)
 (6)								do nothing

JN								jump if N = 1, state (2) else (5)
JC								jump if C = 1, state (2) else (5)
JZ								jump if Z = 1, state (2) else (5)

INP	buttons -> A,N,Z	BUTTONS	A	NZ		read and clear button input register

-----  wishlist (optional optimizations)

JP								jump if N = 0, state (2) else (5)
JNC								jump if C = 0, state (2) else (5)
JNZ								jump if Z = 1, state (2) else (5)

WRB


